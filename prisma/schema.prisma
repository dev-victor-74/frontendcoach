// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole{
  ADMIN
  GUEST
}

enum UserPlan{
  Free
  Pro
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(GUEST)   

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projects      Project[]
  comments      Comment[]
  profile       Profile?
  Userapilimit  Userapilimit?
  credential    SubscriptionCredentials?

  accounts      Account[]
  sessions      Session[]
}

model Profile{
  id            String   @id @default(cuid())
  userId        String @unique
  user          User @relation(fields: [userId], references: [id])
  likesCount    Int?
  level         String?
  profileurl    String?
  profileDesc   String?
  userName      String?
  points        Int?

  twitterLink   String?
  LinkedinLink  String?


  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ChallengeType{
  Free
  Pro
}

model Challenge{
  id              String @unique @default(cuid())
  name            String
  displayImg      String
  desktopImgs     String?
  mobileImgs      String?
  level           String?
  type            String?
  difficultyLevel String
  challengeType   ChallengeType @default(Free)
  challengenum    String?
  solvers         Int? @default(0)
  skillsRequired  String[]
  points          String?
  seriesName      String?
  

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Project{
  id              String @unique @default(cuid())
  name            String
  type            String
  level           String
  code            String?
  html            String?
  css             String?
  js              String?
  isCustom        Boolean @default(false)
  userId          String 
  challengeId     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  comments        Comment[]

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment{
  id            String @unique @default(cuid())
  projectId     String
  project       Project @relation(fields: [projectId], references: [id],onDelete: Cascade)
  userId        String  
  user          User @relation(fields: [userId], references: [id],onDelete: Cascade)
  description   String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model imageAssets{
  id            String @unique @default(cuid())
  imageUrl      String
  name          String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Userapilimit{
  id            String @unique @default(cuid())
  userId        String @unique
  email         String @unique
  count         Int?
  user          User @relation(fields: [userId], references: [id],onDelete: Cascade)
  plan          UserPlan   @default(Free)
  subscriptionId  String?
  customerId      String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SubscriptionCredentials{
  id              String @unique @default(cuid())
  customerEmail   String @unique
  subscriptionId  String
  customerId      String
  user          User @relation(fields: [customerEmail], references: [email],onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SavedChallenge{
  id          String @unique @default(cuid())
  name        String
  userId      String 
  html        String?
  css         String?
  js          String?
  challengeId String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
}





